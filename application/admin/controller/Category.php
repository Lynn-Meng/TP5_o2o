<?php
/**
 * Created by PhpStorm.
 * User: if-information
 * Date: 2017/10/11
 * Time: 下午4:43
 */
namespace app\admin\controller;

use function Sodium\add;
use think\Controller;

class Category extends Controller
{
    private $obj;
    //初始化
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        //以便本类中所有的方法  使用model方法  （对数据库的操作）
        $this->obj = model('Category');
    }

    public function index()
    {
        //获取parent_id  接受来自获取子栏目的id
        $parent_id = input('parent_id',0,'intval');
        //通过model获取分类数据
        $data = $this->obj->getFirstNormalCategoried($parent_id);
        return $this->fetch('',[
           'categories' => $data
        ]);
    }

    /**
     * 修改状态的函数
     */
    public function status()
    {
        //获取参数
        $data = input();
        //生成校验对象
        $validate = validate('Category');
        $res = $validate->scene('status')->check($data);
        if (!$res)
        {
            $this->error($validate->getError());
        }

        //进入数据库  修改状态

        //save  两个参数    保存的值   条件
        $result = $this->obj->save(['status' => $data['status']],['id' => $data['id']]);
        if (!$result)
        {
            $this->error('状态更新失败');
        }
        $this->success('状态更新成功');

    }

    //创建方法
    public function add()
    {
        //获取一级分类
        $categories = $this->obj->getAllFirstNormalCategoried();
        return $this->fetch('',[
            'categories' => $categories
        ]);
    }

    public function save()
    {
        //获取前端发送过来的表单数据
        //判断请求类型
        if (!request()->isPost())
        {
            $this->error('请求失败');
        }
        $data = input('post.');

        //校验数据
        $validate = validate('Category');
        $res = $validate->scene('add')->check($data);
        if (!$res)
        {
            $this->error($validate->getError());
        }
        //校验完毕 pass 添加到数据库
        $result = $this->obj->save($data);
        if (!$result)
        {
            $this->error('新增失败');
        }
        else
        {
            $this->success('新增成功');
        }
    }
//    public function update()
//    {
//        $data = input('id',0,'intval');
//        //更新数据表
//    }

    public function edit()
    {
        $id = input('id',0,'intval');
        $category = $this->obj->get($id);
        $data = $this->obj->getAllFirstNormalCategoried();
        return $this->fetch('',[
            'category' => $category,
            'categories' => $data
        ]);
    }
    public function update()
    {
        $data = input('post.');
        $validate = validate('Category');
        $res = $validate->scene('update')->check($data);
        if (!$res)
        {
            $this->error($validate->getError());
        }

        //校验完毕  并且成功
        $result = $this->obj->save([
            'name'=>$data['name'],
            'parent_id' => $data['parent_id'],
    ],
            [
                'id' => $data['id']
            ]);
        if (!$result)
        {
            $this->error('更新失败');
        }
        else
        {
            $this->success('更新成功');
        }
    }
    public function listorder()
    {
        $data = input('post.');
        $validate = validate('Category');
        $res = $validate->scene('listorder')->check($data);
        if (!$res)
        {
            $this->error($validate->getError());
        }
        $res = $this->obj->save(
            ['listorder' => $data['listorder']],
            ['id' => $data['id']]
        );
        if (!$res)
        {
            $this->result($_SERVER['HTTP_REFERER'],0,'error');
        }
        else
        {
            $this->result($_SERVER['HTTP_REFERER'],1,'success');

        }
    }

    public function test()
    {
        $res = \Map::staticImage('沈阳市于洪区怒江北街红田翠园');
        return $res;
    }


}
